image: node:20

variables:
  # Project config
  BUILD_DIR: build

  # NPN config
  NODE_ENV: production # This also makes NPM_CONFIG_OMIT defaults to `dev` (https://docs.npmjs.com/cli/v10/using-npm/config#omit).
  NPM_CONFIG_OMIT: dev # Just for reliability.
  NPM_CONFIG_CACHE: .npm
  NPM_CONFIG_FUND: "false"

  # GitLab config
  FF_USE_FASTZIP: "true" # enable fastzip - a faster zip implementation that also supports level configuration.
  ARTIFACT_COMPRESSION_LEVEL: fastest #default # can also be set to fastest, fast, slow and slowest. If just enabling fastzip is not enough try setting this to fastest or fast.
  CACHE_COMPRESSION_LEVEL: fastest #default # same as above, but for caches
  DOCKER_DRIVER: overlay2

###########################################################################
# Input variables. Create them on page /<group>/<project>/settings/ci_cd. #
###########################################################################
# - DEPLOY_SSH_PRIVATE_KEY_BASE64: Key to ssh to deploy host.
# - DEPLOY_HOST: Deploy host.
# - DEPLOY_USER: Username to ssh to the host.
# - DEPLOY_PROD_DIR: Prod deploy directory.
# - DEPLOY_STAGE_DIR: Stage deploy directory.

stages:
  - build # Compile & test.
  - deploy # Push to prod/stage server.

# global cache settings for all jobs
# Ensure compatibility with the install job
# goal: the install job loads the cache and
# all other jobs can only use it
cache:
  # most npm libraries will only have 1 entry for the base project deps
  - &global_cache
    key:
      files:
        - package-lock.json
    paths:
      - node_modules/
    policy: pull # prevent subsequent jobs from modifying cache

install:
  stage: .pre # always first, no matter if it is listed in stages
  #  tags:
  #    - web
  #    - node
  cache:
    # Mimic &global_cache_node_mods config but override policy
    # to allow this job to update the cache at the end of the job
    # and only update if it was a successful job (#5)
    - <<: *global_cache
      when: on_success
      policy: pull-push
    # store npm cache for all branches (stores download pkg.tar.gz's)
    # will not be necessary for any other job
    - key: ${CI_JOB_NAME}
      # must be inside $CI_PROJECT_DIR for gitlab-runner caching (#3)
      paths:
        - .npm/
      when: on_success
      policy: pull-push
  script:
    # define cache dir & use it npm!
    - npm ci --prefer-offline --omit=dev

build:
  stage: build
  #  tags:
  #    - web
  #    - node
  before_script:
    - npm install
  script:
    - npm test
    - npx tsc --noEmitOnError
    - npm run build
  artifacts:
    paths:
      - $BUILD_DIR

deploy:stage:
  stage: deploy
  environment:
    name: stage
  image: instrumentisto/rsync-ssh
  #  tags:
  #    - web
  #    - node
  needs:
    - build
  dependencies:
    - build
  variables:
    GIT_STRATEGY: none
    HOST: $DEPLOY_USER@$DEPLOY_HOST
  script:
    # Prepare ssh env.
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod -R 600 ~/.ssh
    # Run ssh agent
    - eval $(ssh-agent -s)
    # Apply ssh key.
    - echo "$DEPLOY_SSH_PRIVATE_KEY_BASE64" | base64 -d | tr -d '\r' | ssh-add -

    - rsync -crv --exclude=/configs --delete $BUILD_DIR/ $HOST:$DEPLOY_STAGE_DIR # --chown=$DEPLOY_USER:$DEPLOY_USER

  cache: {}
  when: manual
  rules:
    - if: $CI_COMMIT_TAG # Never on tags pipelines
      when: never
    - if: $CI_COMMIT_BRANCH == "stage" # Only on stage branch

deploy:prod:
  stage: deploy
  environment:
    name: production
  image: instrumentisto/rsync-ssh
  #  tags:
  #    - web
  #    - node
  needs:
    - build
  dependencies:
    - build
  variables:
    GIT_STRATEGY: none
    HOST: $DEPLOY_USER@$DEPLOY_HOST
  script:
    # Prepare ssh env.
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod -R 600 ~/.ssh
    # Run ssh agent
    - eval $(ssh-agent -s)
    # Apply ssh key.
    - echo "$DEPLOY_SSH_PRIVATE_KEY_BASE64" | base64 -d | tr -d '\r' | ssh-add -

    - rsync -crv --exclude=/configs --delete $BUILD_DIR/ $HOST:$DEPLOY_PROD_DIR # --chown=$DEPLOY_USER:$DEPLOY_USER

  cache: {}
  when: manual
  rules:
    - if: $CI_COMMIT_TAG # Never on tags pipelines
      when: never
    - if: $CI_COMMIT_BRANCH == "main" # Only on prod branch
